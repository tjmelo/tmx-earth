{"version":3,"sources":["feature/country/countrySlice.ts","store/store.ts","model/api.ts","components/ListCoutries.tsx","index.tsx","components/Load/index.ts","components/Load/loading.tsx"],"names":["countrySlice","createSlice","name","initialState","country","reducers","update","state","action","payload","actions","configureStore","reducer","countryReducer","api","axios","create","baseURL","timeout","ListCoutries","dispatch","useDispatch","useState","data","setData","useEffect","get","catch","error","response","then","status","className","onChange","e","target","value","map","idx","common","Load","type","InfoCountries","lazy","ReactDOM","render","StrictMode","store","fallback","document","getElementById","Loading","children"],"mappings":"2LAIMA,EAAeC,YAAY,CAC7BC,KAAM,UACNC,aAAc,CACVC,QAAS,IAEbC,SAAU,CACNC,OAAQ,SAACC,EAAOC,GACZD,EAAMH,QAAUI,EAAOC,YAMpBH,EAAWN,EAAaU,QAAxBJ,OAGAN,IAAf,QCbeW,cAAe,CAC1BC,QAAS,CACLR,QAASS,K,gBCPJC,E,OAAMC,EAAMC,OAAO,CAC5BC,QAAS,qCACTC,QAAS,M,cCEAC,EAAe,WAC1B,IAAMC,EAAWC,cADe,EAERC,mBAAa,IAFL,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAIhCC,qBAAU,WDDRX,EACCY,IAAI,kDACJC,OAAM,SAAAC,GAAK,OAAIA,EAAMC,YCAJC,MAAK,gBAAGP,EAAH,EAAGA,KAAMQ,EAAT,EAASA,OAAT,OAEnBP,EADS,MAAXO,EACU,GACAR,QACX,CAACA,IAMJ,OACE,sBAAKS,UAAU,YAAf,UACE,yBACEA,UAAU,yCACVC,SARgB,SAACC,GACrBd,EAASd,EAAO4B,EAAEC,OAAOC,SAKvB,UAIE,wBAAQA,MAAM,mBAAd,SACIb,EAAY,mBAAL,KAEVA,GAAQA,EAAKc,KAAI,WAAcC,GAAd,IAAEpC,EAAF,EAAEA,KAAF,OAChB,iCAAmBA,EAAKqC,QAAXD,SAGff,EAEE,GADA,cAACiB,EAAA,EAAD,CAASC,KAAK,SAAd,2DC1BJC,G,MAAgBC,gBAAK,kBAAM,iCAEjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUC,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,WAAD,CACEC,SAAU,cAACR,EAAA,EAAD,CAASC,KAAK,OAAd,0BADZ,SAEE,cAACC,EAAD,WAINO,SAASC,eAAe,U,0CCnBXC,ICE2B,SAAC,GAAsB,IAArBV,EAAoB,EAApBA,KAAMW,EAAc,EAAdA,SAC9C,OACI,qBAAKpB,UAAS,sBAAiBS,GAA/B,SAAwCW,O","file":"static/js/main.5ed4b26b.chunk.js","sourcesContent":["// Require createSlice for redux toolkit to reducer...\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Create variable to method createSlice...\nconst countrySlice = createSlice({\n    name: 'country',\n    initialState: {\n        country: [],\n    },\n    reducers: {\n        update: (state, action) => {\n            state.country = action.payload;\n        }\n    }\n})\n\n// Export action update to reducer...\nexport const { update } = countrySlice.actions;\n\n// Export default reducer...\nexport default countrySlice.reducer;","// Require configureStore from redux toolkit...\nimport { configureStore } from '@reduxjs/toolkit';\n\n// Require createSlice from countryReducer...\nimport countryReducer from '../feature/country/countrySlice';\n\n// Export method configureStore with object reducer...\nexport default configureStore({\n    reducer: {\n        country: countryReducer,\n    }\n})","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'https://restcountries.com/v3.1/all',\n    timeout: 5000  \n})\n\n// Export exclusive list of the name coutries...\nexport const apiListCoutries = () => \n    api\n    .get('https://restcountries.com/v3.1/all?fields=name')\n    .catch(error => error.response)\n    ","import React, { useEffect, useState } from 'react'\nimport { apiListCoutries } from '../model/api'\nimport { useDispatch } from 'react-redux'\nimport { update } from '../feature/country/countrySlice'\nimport Loading from './Load'\n\nexport const ListCoutries = () => {\n  const dispatch = useDispatch()\n  const [data, setData] = useState<[]>([])\n\n  useEffect(() => {\n    apiListCoutries().then(({ data, status }) => \n      status !== 200 \n      ? setData([]) \n      : setData(data))\n  }, [data])\n\n  const selectCountry = (e: { target: { value: any } }) => {\n    dispatch(update(e.target.value))\n  }\n\n  return (\n    <div className=\"container\">\n      <select\n        className=\"form-select form-select-lg my-2 shadow\"\n        onChange={selectCountry}\n      >\n        <option value=\"Select a country\">\n          {!data ? '' : 'Select a country' }\n        </option>\n        {data && data.map(({name}: any, idx: number) => (\n          <option key={idx}>{name.common}</option>\n        ))}\n      </select>\n      {!data \n        ? <Loading type='danger'>Data not found, notify the administrator!</Loading> \n        : ''\n      }\n    </div>\n  )\n}\n","import React, { lazy, Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store/store\"\n\nimport { ListCoutries } from \"./components/ListCoutries\"\nimport Loading from \"./components/Load\"\nimport \"./styles/global.scss\"\n\nconst InfoCountries = lazy(() => import(\"./components/Countries\"))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ListCoutries />\n      <Suspense \n        fallback={<Loading type=\"info\">Loading app!</Loading>}>\n        <InfoCountries />\n      </Suspense>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n","import { Loading } from \"./loading\";\n\nexport default Loading\n","interface CLoading {\n    type: string\n}\n\nexport const Loading:React.FC<CLoading> = ({type, children}) => {\n    return(\n        <div className={`alert alert-${type}`}>{children}</div>\n    )\n}\n"],"sourceRoot":""}