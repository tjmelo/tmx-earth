{"version":3,"sources":["components/components.module.css","reportWebVitals.js","feature/country/countrySlice.js","store/store.js","api/api.js","components/ListCoutries.jsx","components/mountListCountries.jsx","components/InfoCountries.jsx","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","countrySlice","createSlice","name","initialState","country","reducers","update","state","action","payload","actions","configureStore","reducer","countryReducer","api","axios","create","baseURL","timeout","ListCoutries","props","dispatch","useDispatch","useState","data","setData","useEffect","get","res","className","onChange","e","target","value","map","list","idx","MountListCountries","parseNumber","element","number","toString","split","qtdeDivisor","Math","floor","length","arr","i","ind","push","splice","join","population","area","style","flag","src","alt","nativeName","alpha3Code","alpha2Code","numericCode","capital","region","subregion","languages","language","iso639_1","currencies","currencie","symbol","code","borders","border","regionalBlocs","regional","acronym","topLevelDomain","InfoCountries","useSelector","info","setInfo","d","el","catch","console","error","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.99d3a54a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flag\":\"components_flag__18FvG\",\"name\":\"components_name__Wq6W9\",\"borders\":\"components_borders__1jVSU\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Require createSlice for redux toolkit to reducer...\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Create variable to method createSlice...\nconst countrySlice = createSlice({\n    name: 'country',\n    initialState: {\n        country: [],\n    },\n    reducers: {\n        update: (state, action) => {\n            state.country = action.payload;\n        }\n    }\n})\n\n// Export action update to reducer...\nexport const { update } = countrySlice.actions;\n\n// Export default reducer...\nexport default countrySlice.reducer;","// Require configureStore from redux toolkit...\nimport { configureStore } from '@reduxjs/toolkit';\n\n// Require createSlice from countryReducer...\nimport countryReducer from '../feature/country/countrySlice';\n\n// Export method configureStore with object reducer...\nexport default configureStore({\n    reducer: {\n        country: countryReducer,\n    }\n})","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'https://restcountries.eu/rest/v2/all',\n    timeout: 5000  \n})\n\n// Export exclusive list of the name coutries...\nexport const apiListCoutries = e => api.get('https://restcountries.eu/rest/v2/all?fields=name') ","import React, { useEffect, useState } from 'react';\nimport { apiListCoutries } from '../api/api';\nimport { useDispatch } from 'react-redux';\nimport { update } from '../feature/country/countrySlice';\n\nexport const ListCoutries = props => {\n\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n    \n    useEffect(() => {\n       apiListCoutries().then(res => setData(res.data));\n    }, [])\n    \n    const selectCountry = e => {\n        dispatch(update(e.target.value));\n    }\n\n    return (\n        <div className=\"container\">\n            <select className='form-select form-select-lg my-2 shadow' onChange={selectCountry}>\n                <option value=\"Select a country\">Select a country</option>\n                { data.map((list, idx) => <option key={idx}>{list.name}</option>) }\n            </select>\n        </div>\n    )\n}","import style from './components.module.css';\n\nexport const MountListCountries = ({data}) => {\n       \n    const parseNumber = element => {\n        let number = element.toString().split(''),\n            qtdeDivisor = Math.floor(number.length / 3),\n            arr = [];\n\n        for(let i=0; i<qtdeDivisor;i++){\n            let ind = number.length - (3*(i+1))-1;\n            if(ind !== -1) arr.push(ind)\n        }\n        \n        for(let i=0; i<arr.length; i++) number.splice(arr[i]+1, 0, '.')\n        return number.join('');\n    }\n\n    let population = parseNumber(data.population),\n        area = parseNumber(data.area);\n\n    return (\n        <div className=\"row\">\n                                            \n            <div className={`col-xs-12 d-flex mb-2 ${style.flag}`}>\n                <figure>\n                    <img src={data.flag} alt={data.nativeName}/>\n                </figure>\n                <span className={`text-primary ${style.name}`}>\n                    {data.name}\n                </span> \n                <sup>{data.alpha3Code}</sup>\n                <sup>{data.alpha2Code}</sup>\n                <sup>{data.numericCode}</sup>\n                <br/>\n            </div>\n\n            <div className={`col-xs-12 col-sm-6 col-md-3 col-lg-3 mb-3`}>\n                <span className=\"text-secondary\">Native name: </span> <br/>\n                <strong className=\"text-primary\">{data.nativeName || '-----'}</strong> <br/>\n            </div>\n\n            <div className={`col-xs-12 col-sm-6 col-md-3 col-lg-3 mb-3`}>\n                <span className=\"text-secondary\">Capital: </span> <br/>\n                {<strong className=\"text-primary\">{data.capital || '-----'}</strong> }<br/>\n            </div>\n\n            <div className={`col-xs-12 col-sm-6 col-md-3 col-lg-3 mb-3`}>\n                <span className=\"text-secondary\">Region: </span> <br/>\n                <strong className=\"text-primary\">{data.region || '-----'}</strong> <br/>\n            </div>\n\n            <div className={`col-xs-12 col-sm-6 col-md-3 col-lg-3 mb-3`}>\n                <span className=\"text-secondary\">Subregion: </span> <br/>\n                <strong className=\"text-primary\">{data.subregion || '-----'}</strong> <br/>\n            </div>\n\n            <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-4 mb-3\">  \n                <span className=\"text-secondary\">Languages: </span> <br/>\n                {data.languages.map((language, idx )=> {\n                    return  <strong key={idx} className=\"text-primary\">\n                                { language.name } | { language.nativeName }\n                                <sup>{ language.iso639_1 }</sup> <br/>\n                            </strong>\n                })}\n            </div>\n\n            <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-4 mb-3\">\n                <span className=\"text-secondary\">Currencies: </span> <br/>\n                {data.currencies.map((currencie, idx )=> {\n                    return  <strong key={idx} className=\"text-primary\">\n                                { currencie.name } \n                                <sup>{ currencie.symbol }</sup>\n                                <sup>{ currencie.code }</sup><br/>\n                            </strong>\n                })}    \n            </div>\n            \n            <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-4 mb-3\">\n                <span className=\"text-secondary\">Borders: </span> <br/>\n                {data.borders.map((border, idx )=> {\n                    return  <strong key={idx} className={`text-primary ${style.borders}`}>\n                                <b>{ border } </b>\n                            </strong>\n                })}    \n            </div>\n\n            <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-4 mb-3\">\n                <span className=\"text-secondary\">Regional Blocs: </span> <br/>\n                {data.regionalBlocs.map((regional, idx )=> {\n                    return  <strong key={idx} className={`text-primary ${style.borders}`}>\n                                { regional.acronym }\n                                <sup>{regional.name}</sup> <br/>\n                            </strong>\n                })}    \n            </div>\n\n            <div className=\"col-xs-12 col-sm-6 col-md-3 col-lg-3 mb-3\">    \n                <span className=\"text-secondary\">Poulation: </span> <br/>\n                <strong className=\"text-primary\">{population || '-----'}</strong>\n            </div>\n\n            <div className={`col-xs-12 col-sm-6 col-md-3 col-lg-3 mb-3`}>\n                <span className=\"text-secondary\">Area: </span> <br/>\n                <strong className=\"text-primary\">{area || '-----'}</strong> <br/>\n            </div>\n\n            <div className={`col-xs-12 col-sm-6 col-md-2 col-lg-2 mb-3`}>\n                <span className=\"text-secondary\">Domain: </span> <br/>\n                <strong className=\"text-primary\">{data.topLevelDomain || '-----'}</strong> <br/>\n            </div>\n\n        </div>\n    )\n}","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\n\nimport { MountListCountries } from './mountListCountries';\n\nexport const InfoCountries = props => {\n\n    const country = useSelector(state => state.country.country);\n    const [info, setInfo] = useState([]);\n\n    useEffect(() => {    \n        // Export all details by countries...\n        setInfo(<div className=\"alert alert-primary\">Getting data...</div>)\n\n        if(country.length === 0 || country === 'Select a country'){\n            setInfo(<div className=\"alert alert-warning\">Select a country!</div>)\n        }else{\n            const data = axios.get(`https://restcountries.eu/rest/v2/name/${country}?fullText=true`)\n            data.then(d => {\n                setInfo(d.data.map((el, idx) => <MountListCountries data={el} key={idx}/> ))\n            }).catch(e => console.error(e));\n        }\n    }, [country])\n\n    return(\n        <section className=\"container my-5\">\n            { info }\n        </section>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport { ListCoutries } from './components/ListCoutries';\nimport { InfoCountries } from './components/InfoCountries';\n\nimport './global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ListCoutries />\n      <InfoCountries />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}