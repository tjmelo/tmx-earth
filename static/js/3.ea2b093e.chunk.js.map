{"version":3,"sources":["styles/components.module.scss","utils/parse-number.ts","components/Mount/section-list.tsx","components/Mount/index.ts","components/Mount/mountListCountries.tsx","components/Countries/index.ts","components/Countries/InfoCountries.tsx"],"names":["module","exports","parseNumber","element","number","toString","split","qtdeDivisor","Math","floor","length","arr","i","ind","push","splice","join","SectionList","data","children","subdata","className","MountListCountries","useState","nativeName","setNativeName","currencies","setCurrencies","useEffect","getNative","native","name","style","flag","src","flags","svg","alt","official","common","width","height","coatOfArms","capital","region","subregion","Object","values","languages","symbol","borders","map","border","idx","population","area","tld","InfoCountries","country","useSelector","state","info","setInfo","Load","type","axios","get","then","el","Mount","catch","e","console","error"],"mappings":"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","file":"static/js/3.ea2b093e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flag\":\"components_flag__1M29F\",\"name\":\"components_name__Sey6z\",\"borders\":\"components_borders__fe66p\"};","export const parseNumber = (element: number) => {\n    let number = element.toString().split(\"\"),\n        qtdeDivisor = Math.floor(number.length / 3),\n        arr = []\n\n    for (let i = 0; i < qtdeDivisor; i++) {\n        let ind = number.length - 3 * (i + 1) - 1\n        if (ind !== -1) arr.push(ind)\n    }\n\n    for (let i = 0; i < arr.length; i++)\n        number.splice(arr[i] + 1, 0, \".\")\n    return number.join(\"\")\n}\n","\ninterface CSectionList{\n    data: any,\n    subdata?: any,\n    children: string\n}\n\nexport const SectionList:React.FC<CSectionList> = ({data, children, subdata}) => {\n    return(\n        <div className={`col-xs-12 my-3 border-bottom`}>\n            <span className=\"text-secondary\">\n            { children }\n            </span>\n            <br />\n            <strong className=\"text-primary\">\n            { data }\n            { subdata \n            ?  <sup> { subdata } </sup>\n            : '' }\n            </strong>\n            <br />\n        </div>\n\n    )\n}\n","import { MountListCountries } from \"./mountListCountries\";\n\nexport default MountListCountries\n","import { parseNumber } from '../../utils'\nimport { SectionList } from './section-list';\nimport { useEffect, useState } from \"react\";\n\nimport style from \"../../styles/components.module.scss\"\n\ninterface CMountListCountries {\n  data: any\n}\n\nexport const MountListCountries:React.FC<CMountListCountries> = ({ data }) => {\n  \n  const [nativeName, setNativeName] = useState<string>()\n  const [currencies, setCurrencies] = useState<string>()\n\n  useEffect(\n    () => {\n      const getNative = (data: object): any => {\n        for( const native in data) return native\n      }\n      setNativeName(getNative(data.name.nativeName))\n      setCurrencies(getNative(data.currencies))\n    }, [ data ]\n  )\n\n  return (\n    <div className=\"row my-5\">\n      <div\n        className={`col-xs-12 d-flex mb-2 ${style.flag}`}\n      >\n        <figure>\n          <img\n            src={data.flags.svg}\n            alt={data.name.official}\n          />\n        </figure>\n        <span className={`text-primary ${style.name}`}>\n          {data.name.common}\n        </span>\n        <img\n          width={30}\n          height={30}\n          src={data.coatOfArms.svg}\n          alt={data.name.official}\n        />\n      </div>\n\n      <SectionList \n        data={nativeName ? data.name.nativeName[nativeName].common: ''}>\n        Native name:\n      </SectionList>\n\n      <SectionList \n        data={ data.capital || \"-----\" }>\n        Capital:\n      </SectionList>\n\n      <SectionList \n        data={ data.region || \"-----\" }>\n        Region:\n      </SectionList>\n\n      <SectionList \n        data={ data.subregion || \"-----\" }>\n        Subregion:\n      </SectionList>\n\n      <SectionList \n        data={ Object.values(data.languages)[0] || \"-----\" }>\n        Languages:\n      </SectionList>\n\n      <SectionList \n        data={ currencies && data.currencies[currencies].name }\n        subdata={currencies && data.currencies[currencies].symbol}>\n        Currencies:\n      </SectionList>\n\n      <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-4 mb-3 border-bottom\">\n        <span className=\"text-secondary\">Borders: </span>{\" \"}\n        <br />\n        {data.borders ? (\n          data.borders.map((border: any, idx: any) => {\n            return (\n              <strong\n                key={idx}\n                className={`text-primary ${style.borders}`}\n              >\n                <b>{border} </b>\n              </strong>\n            )\n          })\n        ) : (\n          <strong className=\"text-primary\">-----</strong>\n        )}\n      </div>\n\n      <SectionList \n        data={ parseNumber(data.population) || \"-----\" }>\n        Poulation:\n      </SectionList>\n\n      <SectionList \n        data={ parseNumber(data.area) || \"-----\" }>\n        Area:\n      </SectionList>\n\n      <SectionList \n        data={ data.tld || \"-----\" }>\n        Domain:\n      </SectionList>\n        \n    </div>\n  )\n}\n","import { InfoCountries } from \"./InfoCountries\";\n\nexport default InfoCountries\n","import { SetStateAction, useEffect, useState } from 'react';\nimport { RootStateOrAny, useSelector } from 'react-redux';\nimport axios from 'axios';\n\nimport MountListCountries from '../Mount';\nimport Loading from '../Load';\n\nexport const InfoCountries = () => {\n\n    const country = useSelector((state: RootStateOrAny) => state.country.country);\n    const [info, setInfo] = useState<[]|SetStateAction<any>>([]);\n\n    useEffect(() => {    \n        // Export all details by countries...\n        setInfo(<div className=\"alert alert-primary\">Getting data...</div>)\n\n        if(country.length === 0 || country === 'Select a country'){\n            setInfo(<Loading type='warning'>Select a country!</Loading>)\n        }else{\n            const data = axios.get(`https://restcountries.com/v3.1/name/${country}?fullText=true`)\n            data.then(({data}) => {\n                setInfo(data.map((el:{}, idx: number) => <MountListCountries data={el} key={idx}/> ))\n            }).catch(e => console.error(e));\n        }\n    }, [country])\n\n    return(\n        <section className=\"container\">\n            { info }\n        </section>\n    )\n}\n"],"sourceRoot":""}